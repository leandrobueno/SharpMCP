name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: TestResults

    - name: Pack (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: dotnet pack --configuration Release --no-build --output ${{ env.NuGetDirectory }}

    - name: Upload packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}

  # Package validation disabled until signing is implemented
  # validate-packages:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
  #   steps:
  #   - uses: actions/setup-dotnet@v4
  #   - uses: actions/download-artifact@v4
  #   - run: dotnet nuget verify *.nupkg

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.NuGetDirectory }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Uncomment to sign packages when certificate is available
    # - name: Sign packages
    #   run: |
    #     foreach ($package in Get-ChildItem -Path "${{ env.NuGetDirectory }}" -Filter "*.nupkg") {
    #       dotnet nuget sign $package.FullName `
    #         --certificate-path ${{ secrets.CERTIFICATE_PATH }} `
    #         --certificate-password ${{ secrets.CERTIFICATE_PASSWORD }} `
    #         --timestamper http://timestamp.digicert.com
    #     }
    #   shell: pwsh

    - name: Push to NuGet.org
      continue-on-error: true
      run: |
        foreach ($package in Get-ChildItem -Path "${{ env.NuGetDirectory }}" -Filter "*.nupkg") {
          dotnet nuget push $package.FullName `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json `
            --skip-duplicate
        }
      shell: pwsh

    - name: Push to GitHub Packages
      run: |
        dotnet nuget add source `
          --username ${{ github.actor }} `
          --password ${{ secrets.GITHUB_TOKEN }} `
          --store-password-in-clear-text `
          --name github `
          "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        foreach ($package in Get-ChildItem -Path "${{ env.NuGetDirectory }}" -Filter "*.nupkg") {
          dotnet nuget push $package.FullName `
            --source github `
            --skip-duplicate
        }
      shell: pwsh

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.NuGetDirectory }}/*.nupkg
        generate_release_notes: true
        body: |
          ## Installation
          
          Install the complete package:
          ```bash
          dotnet add package SharpMCP
          ```
          
          Or install individual packages:
          ```bash
          dotnet add package SharpMCP.Core
          dotnet add package SharpMCP.Server
          dotnet add package SharpMCP.Tools.Common
          ```
          
          ## Templates
          
          ```bash
          dotnet new install SharpMCP.Templates
          ```
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
